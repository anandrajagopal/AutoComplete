{"name":"AutoComplete","tagline":"A very fast autocomplete utility","body":"auto-complete\r\n=============\r\n\r\nA very fast autocomplete utility\r\n\r\nHow to use:\r\n\r\n    SuffixTree suffixTree = new SuffixTree();\r\n\t\tList<String> words = new LinkedList<String>() {\r\n\t\t\tprivate static final long serialVersionUID = 1676489769011386326L;\r\n\r\n\t\t\t{\r\n\t\t\t\tadd(\"banana\");\r\n\t\t\t\tadd(\"mango\");\r\n\t\t\t\tadd(\"minimize\");\r\n\t\t\t\tadd(\"maximize\");\r\n\t\t\t\tadd(\"bank\");\r\n\t\t\t\tadd(\"development you$\");\r\n\t\t\t}\r\n\t\t};\r\n\t\tsuffixTree.add(words);\r\n\t\t\r\n\t\tThen:\r\n\t\t\r\n\t\tList<Integer> indices = new LinkedList<Integer>();\r\n\t\tsuffixTree.find(\"ban\", indices);\r\n\t\t\r\n\t\twill return [1, 5]\r\n\t\t\r\nPerformance\r\n\r\nI have tested it with over 100,000 words. Very rarely does the search takes 1 millisecond. Mostly the searches time can \r\nonly be measured in nanoseconds. This is on a mac osx with 4 gb ram.\r\n\r\nDownload and use it and provide feedback!\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}